{"ast":null,"code":"var _jsxFileName = \"/home/agreus/Documents/webdev/mercury-messenger/client/src/components/layout/ChatWindow.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState, useMemo, useRef, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useInView } from \"react-intersection-observer\";\n\n// components\nimport ChatInputBox from \"../chat/ChatInputBox\";\nimport ChatBanner from \"../chat/ChatBanner\";\nimport GoToBottomButton from \"../chat/GoToBottomButton\";\nimport Dots from \"../ui/Dots\";\n\n// context\nimport { DataContext } from \"../context/DataContext\";\nimport { ChatSkeletonLoader } from \"../ui/SkeletonLoaders\";\n\n// utility hooks\nimport useSocket from \"../../utils/socket\";\nimport { ChatStack } from \"../../utils/iterableComponents\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatWindow() {\n  _s();\n  const {\n    channel\n  } = useParams();\n\n  // context\n  const {\n    dataReady,\n    chatMounted,\n    stateRestored,\n    dataHelpers,\n    selectedGroup,\n    selectedChannel,\n    selectedChatIsDepleted\n  } = useContext(DataContext);\n\n  // states\n  const [lastUpdate, setLastUpdate] = useState(Date.now());\n\n  // refs\n  const topOfPageRef = useRef(null);\n  const bottomOfPageRef = useRef(null);\n  const chatWindowRef = useRef(null);\n\n  // scrollRefs\n  const scrollElapsedRef = useRef(null);\n  const scrollTimerRef = useRef(null);\n  const scrollPositionRef = useRef(null);\n\n  // intersection-observer\n  const [bottomVisibleRef, bottomOfPageIsVisible] = useInView();\n\n  // custom hooks\n  const {\n    sendMessage,\n    appendMessage,\n    fetchMore\n  } = useSocket();\n\n  // memos\n  const memoizedSkeleton = useMemo(() => /*#__PURE__*/_jsxDEV(ChatSkeletonLoader, {\n    count: 15\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 42\n  }, this), []);\n\n  // scroll to bottom on every new message if already latched to the bottom,\n  function goToBottom(params) {\n    if (params !== null && params !== void 0 && params.smooth) {\n      bottomOfPageRef.current.scrollIntoView({\n        block: \"end\",\n        inline: \"start\"\n      });\n    } else {\n      const chatWindow = document.querySelector(\"#chatWindow\");\n      chatWindow.scrollTo({\n        top: chatWindow.scrollHeight,\n        behavior: \"instant\"\n      });\n    }\n  }\n\n  // scroll to bottom on first load\n  useEffect(() => {\n    if (chatWindowRef.current) {\n      goToBottom();\n    }\n  }, [dataReady, selectedChannel]);\n\n  // scroll to bottom on new message if latched to the bottom\n  useEffect(() => {\n    if (bottomOfPageRef.current && bottomOfPageIsVisible) {\n      goToBottom({\n        smooth: true\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  });\n\n  // scroll position preservation on fetchMore\n  useEffect(() => {\n    const chatWindow = document.querySelector(\"#chatWindow\");\n    if (scrollPositionRef.current) {\n      const newPosition = chatWindow.scrollHeight - scrollPositionRef.current;\n      chatWindow.scrollTo({\n        top: newPosition,\n        behavior: \"instant\"\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [scrollPositionRef.current]);\n\n  // rerender every 30 sec to update timestamps\n  useEffect(() => {\n    const rerenderInterval = setInterval(() => setLastUpdate(Date.now()), 30000);\n    return () => clearInterval(rerenderInterval);\n  }, [lastUpdate]);\n  function sendOut(sendObj) {\n    if (dataReady) {\n      const {\n        elapsed,\n        lastCluster,\n        lastSender\n      } = dataHelpers.getLastInfo(selectedGroup._id, selectedChannel._id);\n      if (sendObj.reply || elapsed > 60000 || lastSender !== localStorage.username) {\n        sendMessage({\n          message: sendObj,\n          target: {\n            group: selectedGroup._id,\n            channel: selectedChannel._id\n          }\n        });\n      } else if (elapsed < 60000 && lastSender === localStorage.username) {\n        appendMessage({\n          message: sendObj,\n          parent: lastCluster,\n          target: {\n            group: selectedGroup._id,\n            channel: selectedChannel._id\n          }\n        });\n      }\n      goToBottom({\n        smooth: true\n      });\n    }\n  }\n\n  // fetch more messages on scroll to top, and save scroll position\n  function handleScroll() {\n    function setPositionOnTimeout() {\n      scrollTimerRef.current = setTimeout(() => {\n        scrollElapsedRef.current = null;\n        if (chatWindowRef.current.scrollTop === 0 && !selectedChatIsDepleted) {\n          fetchMore({\n            target: {\n              group: selectedGroup._id,\n              channel: selectedChannel._id\n            },\n            last: selectedGroup.chatData[selectedChannel._id][0].clusterTimestamp\n          }).then(() => {\n            scrollPositionRef.current = chatWindowRef.current.scrollHeight;\n          });\n        }\n      }, 250);\n    }\n\n    // if timer is not set, set it\n    if (!(scrollElapsedRef !== null && scrollElapsedRef !== void 0 && scrollElapsedRef.current)) {\n      scrollElapsedRef.current = Date.now();\n      setPositionOnTimeout();\n    }\n\n    // throttler, if time passed since last scroll evt <250ms ignore and reset scroll timer\n    else if (Date.now() - scrollElapsedRef.current < 250) {\n      scrollElapsedRef.current = Date.now();\n      clearTimeout(scrollTimerRef.current);\n      setPositionOnTimeout();\n    }\n  }\n  if (!dataReady || !chatMounted || !stateRestored) {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"w-full h-full flex-grow min-w-0 bg-gray-600 overflow-x-hidden flex flex-col fixed right-0 top-0 md:relative\",\n      children: [/*#__PURE__*/_jsxDEV(ChatBanner, {\n        name: channel,\n        pending: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full flex-grow overflow-y-auto overflow-x-hidden scrollbar-dark scroll-smooth\",\n        children: memoizedSkeleton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 7\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"w-full h-full flex-grow min-w-0 bg-gray-600 overflow-x-hidden flex flex-col fixed right-0 top-0 md:relative\",\n      children: [/*#__PURE__*/_jsxDEV(ChatBanner, {\n        name: selectedChannel.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"overflow-y-auto overflow-x-hidden scrollbar-dark scroll-smooth\",\n        id: \"chatWindow\",\n        onScroll: () => handleScroll(),\n        ref: chatWindowRef,\n        children: [selectedChatIsDepleted ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-full h-20 flex justify-center items-center opacity-40\",\n          children: \"no more messages\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 195,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-full h-20 flex justify-center items-center\",\n          ref: topOfPageRef,\n          children: /*#__PURE__*/_jsxDEV(Dots, {\n            className: \"flex w-10 justify-around items-center p-0.5 fill-gray-500\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 203,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 199,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(ChatStack, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(GoToBottomButton, {\n          visible: bottomOfPageIsVisible,\n          passOnClick: () => goToBottom({\n            smooth: true\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-full h-28\",\n          ref: el => {\n            bottomOfPageRef.current = el;\n            bottomVisibleRef(el);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ChatInputBox, {\n          return: sendOut\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 188,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this);\n  }\n}\n_s(ChatWindow, \"j5CIoGEdSwssR5v9oDd7hPYIyfo=\", false, function () {\n  return [useParams, useInView, useSocket];\n});\n_c = ChatWindow;\nexport default ChatWindow;\nvar _c;\n$RefreshReg$(_c, \"ChatWindow\");","map":{"version":3,"names":["useEffect","useState","useMemo","useRef","useContext","useParams","useInView","ChatInputBox","ChatBanner","GoToBottomButton","Dots","DataContext","ChatSkeletonLoader","useSocket","ChatStack","ChatWindow","channel","dataReady","chatMounted","stateRestored","dataHelpers","selectedGroup","selectedChannel","selectedChatIsDepleted","lastUpdate","setLastUpdate","Date","now","topOfPageRef","bottomOfPageRef","chatWindowRef","scrollElapsedRef","scrollTimerRef","scrollPositionRef","bottomVisibleRef","bottomOfPageIsVisible","sendMessage","appendMessage","fetchMore","memoizedSkeleton","goToBottom","params","smooth","current","scrollIntoView","block","inline","chatWindow","document","querySelector","scrollTo","top","scrollHeight","behavior","newPosition","rerenderInterval","setInterval","clearInterval","sendOut","sendObj","elapsed","lastCluster","lastSender","getLastInfo","_id","reply","localStorage","username","message","target","group","parent","handleScroll","setPositionOnTimeout","setTimeout","scrollTop","last","chatData","clusterTimestamp","then","clearTimeout","name","el"],"sources":["/home/agreus/Documents/webdev/mercury-messenger/client/src/components/layout/ChatWindow.js"],"sourcesContent":["import { useEffect, useState, useMemo, useRef, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useInView } from \"react-intersection-observer\";\n\n// components\nimport ChatInputBox from \"../chat/ChatInputBox\";\nimport ChatBanner from \"../chat/ChatBanner\";\nimport GoToBottomButton from \"../chat/GoToBottomButton\";\nimport Dots from \"../ui/Dots\";\n\n// context\nimport { DataContext } from \"../context/DataContext\";\nimport { ChatSkeletonLoader } from \"../ui/SkeletonLoaders\";\n\n// utility hooks\nimport useSocket from \"../../utils/socket\";\nimport { ChatStack } from \"../../utils/iterableComponents\";\n\nfunction ChatWindow() {\n  const { channel } = useParams();\n\n  // context\n  const {\n    dataReady,\n    chatMounted,\n    stateRestored,\n    dataHelpers,\n    selectedGroup,\n    selectedChannel,\n    selectedChatIsDepleted,\n  } = useContext(DataContext);\n\n  // states\n  const [lastUpdate, setLastUpdate] = useState(Date.now());\n\n  // refs\n  const topOfPageRef = useRef(null);\n  const bottomOfPageRef = useRef(null);\n  const chatWindowRef = useRef(null);\n\n  // scrollRefs\n  const scrollElapsedRef = useRef(null);\n  const scrollTimerRef = useRef(null);\n  const scrollPositionRef = useRef(null);\n\n  // intersection-observer\n  const [bottomVisibleRef, bottomOfPageIsVisible] = useInView();\n\n  // custom hooks\n  const { sendMessage, appendMessage, fetchMore } = useSocket();\n\n  // memos\n  const memoizedSkeleton = useMemo(() => <ChatSkeletonLoader count={15} />, []);\n\n  // scroll to bottom on every new message if already latched to the bottom,\n  function goToBottom(params) {\n    if (params?.smooth) {\n      bottomOfPageRef.current.scrollIntoView({\n        block: \"end\",\n        inline: \"start\",\n      });\n    } else {\n      const chatWindow = document.querySelector(\"#chatWindow\");\n\n      chatWindow.scrollTo({\n        top: chatWindow.scrollHeight,\n        behavior: \"instant\",\n      });\n    }\n  }\n\n  // scroll to bottom on first load\n  useEffect(() => {\n    if (chatWindowRef.current) {\n      goToBottom();\n    }\n  }, [dataReady, selectedChannel]);\n\n  // scroll to bottom on new message if latched to the bottom\n  useEffect(() => {\n    if (bottomOfPageRef.current && bottomOfPageIsVisible) {\n      goToBottom({ smooth: true });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  });\n\n  // scroll position preservation on fetchMore\n  useEffect(() => {\n    const chatWindow = document.querySelector(\"#chatWindow\");\n    if (scrollPositionRef.current) {\n      const newPosition = chatWindow.scrollHeight - scrollPositionRef.current;\n\n      chatWindow.scrollTo({\n        top: newPosition,\n        behavior: \"instant\",\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [scrollPositionRef.current]);\n\n  // rerender every 30 sec to update timestamps\n  useEffect(() => {\n    const rerenderInterval = setInterval(\n      () => setLastUpdate(Date.now()),\n      30000\n    );\n    return () => clearInterval(rerenderInterval);\n  }, [lastUpdate]);\n\n  function sendOut(sendObj) {\n    if (dataReady) {\n      const { elapsed, lastCluster, lastSender } = dataHelpers.getLastInfo(\n        selectedGroup._id,\n        selectedChannel._id\n      );\n      if (\n        sendObj.reply ||\n        elapsed > 60000 ||\n        lastSender !== localStorage.username\n      ) {\n        sendMessage({\n          message: sendObj,\n          target: { group: selectedGroup._id, channel: selectedChannel._id },\n        });\n      } else if (elapsed < 60000 && lastSender === localStorage.username) {\n        appendMessage({\n          message: sendObj,\n          parent: lastCluster,\n          target: { group: selectedGroup._id, channel: selectedChannel._id },\n        });\n      }\n      goToBottom({ smooth: true });\n    }\n  }\n\n  // fetch more messages on scroll to top, and save scroll position\n  function handleScroll() {\n    function setPositionOnTimeout() {\n      scrollTimerRef.current = setTimeout(() => {\n        scrollElapsedRef.current = null;\n\n        if (chatWindowRef.current.scrollTop === 0 && !selectedChatIsDepleted) {\n          fetchMore({\n            target: {\n              group: selectedGroup._id,\n              channel: selectedChannel._id,\n            },\n            last: selectedGroup.chatData[selectedChannel._id][0]\n              .clusterTimestamp,\n          }).then(() => {\n            scrollPositionRef.current = chatWindowRef.current.scrollHeight;\n          });\n        }\n      }, 250);\n    }\n\n    // if timer is not set, set it\n    if (!scrollElapsedRef?.current) {\n      scrollElapsedRef.current = Date.now();\n      setPositionOnTimeout();\n    }\n\n    // throttler, if time passed since last scroll evt <250ms ignore and reset scroll timer\n    else if (Date.now() - scrollElapsedRef.current < 250) {\n      scrollElapsedRef.current = Date.now();\n      clearTimeout(scrollTimerRef.current);\n      setPositionOnTimeout();\n    }\n  }\n\n  if (!dataReady || !chatMounted || !stateRestored) {\n    return (\n      <section className=\"w-full h-full flex-grow min-w-0 bg-gray-600 overflow-x-hidden flex flex-col fixed right-0 top-0 md:relative\">\n        <ChatBanner name={channel} pending />\n\n        <div className=\"w-full flex-grow overflow-y-auto overflow-x-hidden scrollbar-dark scroll-smooth\">\n          {memoizedSkeleton}\n        </div>\n      </section>\n    );\n  } else {\n    return (\n      <section className=\"w-full h-full flex-grow min-w-0 bg-gray-600 overflow-x-hidden flex flex-col fixed right-0 top-0 md:relative\">\n        {/* // firefox does not respect flex shrink without width min 0 ! */}\n\n        <ChatBanner name={selectedChannel.name} />\n\n        <div\n          className=\"overflow-y-auto overflow-x-hidden scrollbar-dark scroll-smooth\"\n          id=\"chatWindow\"\n          onScroll={() => handleScroll()}\n          ref={chatWindowRef}\n        >\n          {selectedChatIsDepleted ? (\n            <div className=\"w-full h-20 flex justify-center items-center opacity-40\">\n              no more messages\n            </div>\n          ) : (\n            <div\n              className=\"w-full h-20 flex justify-center items-center\"\n              ref={topOfPageRef}\n            >\n              <Dots className=\"flex w-10 justify-around items-center p-0.5 fill-gray-500\" />\n            </div>\n          )}\n\n          <ChatStack />\n\n          <GoToBottomButton\n            visible={bottomOfPageIsVisible}\n            passOnClick={() => goToBottom({ smooth: true })}\n          />\n\n          <div\n            className=\"w-full h-28\"\n            ref={(el) => {\n              bottomOfPageRef.current = el;\n              bottomVisibleRef(el);\n            }}\n          ></div>\n\n          <ChatInputBox return={sendOut} />\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default ChatWindow;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}