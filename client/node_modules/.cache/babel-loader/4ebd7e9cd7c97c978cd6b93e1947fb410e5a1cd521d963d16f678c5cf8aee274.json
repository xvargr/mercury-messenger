{"ast":null,"code":"import _slicedToArray from \"/home/agreus/Documents/webdev/mercury-messenger/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"/home/agreus/Documents/webdev/mercury-messenger/client/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"/home/agreus/Documents/webdev/mercury-messenger/client/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"/home/agreus/Documents/webdev/mercury-messenger/client/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"/home/agreus/Documents/webdev/mercury-messenger/client/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport * as React from 'react';\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\nvar observerMap = new Map();\nvar RootIds = new WeakMap();\nvar rootId = 0;\nvar unsupportedValue = undefined;\n/**\r\n * What should be the default behavior if the IntersectionObserver is unsupported?\r\n * Ideally the polyfill has been loaded, you can have the following happen:\r\n * - `undefined`: Throw an error\r\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\r\n * **/\n\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(function (key) {\n    return options[key] !== undefined;\n  }).map(function (key) {\n    return \"\".concat(key, \"_\").concat(key === 'root' ? getRootId(options.root) : options[key]);\n  }).toString();\n}\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  var id = optionsToId(options);\n  var instance = observerMap.get(id);\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    var elements = new Map();\n    var thresholds;\n    var observer = new IntersectionObserver(function (entries) {\n      entries.forEach(function (entry) {\n        var _elements$get;\n\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        var inView = entry.isIntersecting && thresholds.some(function (threshold) {\n          return entry.intersectionRatio >= threshold;\n        }); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(function (callback) {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id: id,\n      observer: observer,\n      elements: elements\n    };\n    observerMap.set(id, instance);\n  }\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @param fallbackInView - Fallback inView value.\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\n\nfunction observe(element, callback) {\n  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  var fallbackInView = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : unsupportedValue;\n  if (typeof window.IntersectionObserver === 'undefined' && fallbackInView !== undefined) {\n    var bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return function () {// Nothing to cleanup\n    };\n  } // An observer with the same options can be reused, so lets use this fact\n\n  var _createObserver = createObserver(options),\n    id = _createObserver.id,\n    observer = _createObserver.observer,\n    elements = _createObserver.elements; // Register the callback listener for this element\n\n  var callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\nvar _excluded = [\"children\", \"as\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\", \"fallbackInView\"];\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */\nvar InView = /*#__PURE__*/function (_React$Component) {\n  _inherits(InView, _React$Component);\n  var _super = _createSuper(InView);\n  function InView(props) {\n    var _this;\n    _classCallCheck(this, InView);\n    _this = _super.call(this, props);\n    _this.node = null;\n    _this._unobserveCb = null;\n    _this.handleNode = function (node) {\n      if (_this.node) {\n        // Clear the old observer, before we start observing a new element\n        _this.unobserve();\n        if (!node && !_this.props.triggerOnce && !_this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          _this.setState({\n            inView: !!_this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n      _this.node = node ? node : null;\n      _this.observeNode();\n    };\n    _this.handleChange = function (inView, entry) {\n      if (inView && _this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        _this.unobserve();\n      }\n      if (!isPlainChildren(_this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        _this.setState({\n          inView: inView,\n          entry: entry\n        });\n      }\n      if (_this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        _this.props.onChange(inView, entry);\n      }\n    };\n    _this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n    return _this;\n  }\n  _createClass(InView, [{\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      // If a IntersectionObserver option changed, reinit the observer\n      if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n        this.unobserve();\n        this.observeNode();\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this.unobserve();\n      this.node = null;\n    }\n  }, {\n    key: \"observeNode\",\n    value: function observeNode() {\n      if (!this.node || this.props.skip) return;\n      var _this$props2 = this.props,\n        threshold = _this$props2.threshold,\n        root = _this$props2.root,\n        rootMargin = _this$props2.rootMargin,\n        trackVisibility = _this$props2.trackVisibility,\n        delay = _this$props2.delay,\n        fallbackInView = _this$props2.fallbackInView;\n      this._unobserveCb = observe(this.node, this.handleChange, {\n        threshold: threshold,\n        root: root,\n        rootMargin: rootMargin,\n        // @ts-ignore\n        trackVisibility: trackVisibility,\n        // @ts-ignore\n        delay: delay\n      }, fallbackInView);\n    }\n  }, {\n    key: \"unobserve\",\n    value: function unobserve() {\n      if (this._unobserveCb) {\n        this._unobserveCb();\n        this._unobserveCb = null;\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      if (!isPlainChildren(this.props)) {\n        var _this$state = this.state,\n          inView = _this$state.inView,\n          entry = _this$state.entry;\n        return this.props.children({\n          inView: inView,\n          entry: entry,\n          ref: this.handleNode\n        });\n      }\n      var _this$props = this.props,\n        children = _this$props.children,\n        as = _this$props.as,\n        props = _objectWithoutPropertiesLoose(_this$props, _excluded);\n      return React.createElement(as || 'div', _extends({\n        ref: this.handleNode\n      }, props), children);\n    }\n  }]);\n  return InView;\n}(React.Component);\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\nfunction useInView() {\n  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n    threshold = _ref.threshold,\n    delay = _ref.delay,\n    trackVisibility = _ref.trackVisibility,\n    rootMargin = _ref.rootMargin,\n    root = _ref.root,\n    triggerOnce = _ref.triggerOnce,\n    skip = _ref.skip,\n    initialInView = _ref.initialInView,\n    fallbackInView = _ref.fallbackInView,\n    onChange = _ref.onChange;\n  var _state$entry;\n  var _React$useState = React.useState(null),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    ref = _React$useState2[0],\n    setRef = _React$useState2[1];\n  var callback = React.useRef();\n  var _React$useState3 = React.useState({\n      inView: !!initialInView,\n      entry: undefined\n    }),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    state = _React$useState4[0],\n    setState = _React$useState4[1]; // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n\n  callback.current = onChange;\n  React.useEffect(function () {\n    // Ensure we have node ref, and that we shouldn't skip observing\n    if (skip || !ref) return;\n    var unobserve;\n    unobserve = observe(ref, function (inView, entry) {\n      setState({\n        inView: inView,\n        entry: entry\n      });\n      if (callback.current) callback.current(inView, entry);\n      if (entry.isIntersecting && triggerOnce && unobserve) {\n        // If it should only trigger once, unobserve the element after it's inView\n        unobserve();\n        unobserve = undefined;\n      }\n    }, {\n      root: root,\n      rootMargin: rootMargin,\n      threshold: threshold,\n      // @ts-ignore\n      trackVisibility: trackVisibility,\n      // @ts-ignore\n      delay: delay\n    }, fallbackInView);\n    return function () {\n      if (unobserve) {\n        unobserve();\n      }\n    };\n  },\n  // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [\n  // If the threshold is an array, convert it to a string, so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, ref, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  var entryTarget = (_state$entry = state.entry) == null ? void 0 : _state$entry.target;\n  React.useEffect(function () {\n    if (!ref && entryTarget && !triggerOnce && !skip) {\n      // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n        entry: undefined\n      });\n    }\n  }, [ref, entryTarget, triggerOnce, skip, initialInView]);\n  var result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\nexport { InView, defaultFallbackInView, observe, useInView };","map":{"version":3,"mappings":"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","names":["observerMap","Map","RootIds","WeakMap","rootId","unsupportedValue","undefined","defaultFallbackInView","inView","getRootId","root","has","get","set","toString","optionsToId","options","Object","keys","sort","filter","key","map","createObserver","id","instance","elements","thresholds","observer","IntersectionObserver","entries","forEach","entry","isIntersecting","some","threshold","intersectionRatio","trackVisibility","isVisible","target","callback","Array","isArray","element","fallbackInView","window","bounds","getBoundingClientRect","time","boundingClientRect","intersectionRect","rootBounds","callbacks","push","observe","unobserve","splice","indexOf","length","delete","size","disconnect","isPlainChildren","props","children","InView","constructor","node","_unobserveCb","handleNode","triggerOnce","skip","setState","initialInView","observeNode","handleChange","onChange","state","componentDidUpdate","prevProps","rootMargin","delay","componentWillUnmount","render","ref","_this$props","as","React","createElement","Component","useInView","useState","setRef","useRef","current","useEffect","entryTarget","_state$entry","result"],"sources":["/home/agreus/Documents/webdev/mercury-messenger/client/node_modules/src/observe.ts","/home/agreus/Documents/webdev/mercury-messenger/client/node_modules/src/InView.tsx","/home/agreus/Documents/webdev/mercury-messenger/client/node_modules/src/useInView.tsx"],"sourcesContent":["import type { ObserverInstanceCallback } from './index';\n\nconst observerMap = new Map<\n  string,\n  {\n    id: string;\n    observer: IntersectionObserver;\n    elements: Map<Element, Array<ObserverInstanceCallback>>;\n  }\n>();\n\nconst RootIds: WeakMap<Element | Document, string> = new WeakMap();\nlet rootId = 0;\n\nlet unsupportedValue: boolean | undefined = undefined;\n\n/**\n * What should be the default behavior if the IntersectionObserver is unsupported?\n * Ideally the polyfill has been loaded, you can have the following happen:\n * - `undefined`: Throw an error\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\n * **/\nexport function defaultFallbackInView(inView: boolean | undefined) {\n  unsupportedValue = inView;\n}\n\n/**\n * Generate a unique ID for the root element\n * @param root\n */\nfunction getRootId(root: IntersectionObserverInit['root']) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n\n/**\n * Convert the options to a string Id, based on the values.\n * Ensures we can reuse the same observer when observing elements with the same options.\n * @param options\n */\nexport function optionsToId(options: IntersectionObserverInit) {\n  return Object.keys(options)\n    .sort()\n    .filter((key) => options[key] !== undefined)\n    .map((key) => {\n      return `${key}_${\n        key === 'root' ? getRootId(options.root) : options[key]\n      }`;\n    })\n    .toString();\n}\n\nfunction createObserver(options: IntersectionObserverInit) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map<Element, Array<ObserverInstanceCallback>>();\n    let thresholds: number[] | readonly number[];\n\n    const observer = new IntersectionObserver((entries) => {\n      entries.forEach((entry) => {\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView =\n          entry.isIntersecting &&\n          thresholds.some((threshold) => entry.intersectionRatio >= threshold);\n\n        // @ts-ignore support IntersectionObserver v2\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        elements.get(entry.target)?.forEach((callback) => {\n          callback(inView, entry);\n        });\n      });\n    }, options);\n\n    // Ensure we have a valid thresholds array. If not, use the threshold from the options\n    thresholds =\n      observer.thresholds ||\n      (Array.isArray(options.threshold)\n        ? options.threshold\n        : [options.threshold || 0]);\n\n    instance = {\n      id,\n      observer,\n      elements,\n    };\n\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n\n/**\n * @param element - DOM Element to observe\n * @param callback - Callback function to trigger when intersection status changes\n * @param options - Intersection Observer options\n * @param fallbackInView - Fallback inView value.\n * @return Function - Cleanup function that should be triggered to unregister the observer\n */\nexport function observe(\n  element: Element,\n  callback: ObserverInstanceCallback,\n  options: IntersectionObserverInit = {},\n  fallbackInView = unsupportedValue,\n) {\n  if (\n    typeof window.IntersectionObserver === 'undefined' &&\n    fallbackInView !== undefined\n  ) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio:\n        typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds,\n    });\n    return () => {\n      // Nothing to cleanup\n    };\n  }\n  // An observer with the same options can be reused, so lets use this fact\n  const { id, observer, elements } = createObserver(options);\n\n  // Register the callback listener for this element\n  let callbacks = elements.get(element) || [];\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n","import * as React from 'react';\nimport type { IntersectionObserverProps, PlainChildrenProps } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\nfunction isPlainChildren(\n  props: IntersectionObserverProps | PlainChildrenProps,\n): props is PlainChildrenProps {\n  return typeof props.children !== 'function';\n}\n\n/**\n ## Render props\n\n To use the `<InView>` component, you pass it a function. It will be called\n whenever the state changes, with the new value of `inView`. In addition to the\n `inView` prop, children also receive a `ref` that should be set on the\n containing DOM element. This is the element that the IntersectionObserver will\n monitor.\n\n If you need it, you can also access the\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\n on `entry`, giving you access to all the details about the current intersection\n state.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView>\n {({ inView, ref, entry }) => (\n      <div ref={ref}>\n        <h2>{`Header inside viewport ${inView}.`}</h2>\n      </div>\n    )}\n </InView>\n );\n\n export default Component;\n ```\n\n ## Plain children\n\n You can pass any element to the `<InView />`, and it will handle creating the\n wrapping DOM element. Add a handler to the `onChange` method, and control the\n state in your own component. Any extra props you add to `<InView>` will be\n passed to the HTML element, allowing you set the `className`, `style`, etc.\n\n ```jsx\n import { InView } from 'react-intersection-observer';\n\n const Component = () => (\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\n </InView>\n );\n\n export default Component;\n ```\n */\nexport class InView extends React.Component<\n  IntersectionObserverProps | PlainChildrenProps,\n  State\n> {\n  constructor(props: IntersectionObserverProps | PlainChildrenProps) {\n    super(props);\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined,\n    };\n  }\n\n  componentDidUpdate(prevProps: IntersectionObserverProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (\n      prevProps.rootMargin !== this.props.rootMargin ||\n      prevProps.root !== this.props.root ||\n      prevProps.threshold !== this.props.threshold ||\n      prevProps.skip !== this.props.skip ||\n      prevProps.trackVisibility !== this.props.trackVisibility ||\n      prevProps.delay !== this.props.delay\n    ) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  node: Element | null = null;\n  _unobserveCb: (() => void) | null = null;\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView,\n    } = this.props;\n\n    this._unobserveCb = observe(\n      this.node,\n      this.handleChange,\n      {\n        threshold,\n        root,\n        rootMargin,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay,\n      },\n      fallbackInView,\n    );\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n      this._unobserveCb = null;\n    }\n  }\n\n  handleNode = (node?: Element | null) => {\n    if (this.node) {\n      // Clear the old observer, before we start observing a new element\n      this.unobserve();\n\n      if (!node && !this.props.triggerOnce && !this.props.skip) {\n        // Reset the state if we get a new node, and we aren't ignoring updates\n        this.setState({ inView: !!this.props.initialInView, entry: undefined });\n      }\n    }\n\n    this.node = node ? node : null;\n    this.observeNode();\n  };\n\n  handleChange = (inView: boolean, entry: IntersectionObserverEntry) => {\n    if (inView && this.props.triggerOnce) {\n      // If `triggerOnce` is true, we should stop observing the element.\n      this.unobserve();\n    }\n    if (!isPlainChildren(this.props)) {\n      // Store the current State, so we can pass it to the children in the next render update\n      // There's no reason to update the state for plain children, since it's not used in the rendering.\n      this.setState({ inView, entry });\n    }\n    if (this.props.onChange) {\n      // If the user is actively listening for onChange, always trigger it\n      this.props.onChange(inView, entry);\n    }\n  };\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const { inView, entry } = this.state;\n      return this.props.children({ inView, entry, ref: this.handleNode });\n    }\n\n    const {\n      children,\n      as,\n      triggerOnce,\n      threshold,\n      root,\n      rootMargin,\n      onChange,\n      skip,\n      trackVisibility,\n      delay,\n      initialInView,\n      fallbackInView,\n      ...props\n    } = this.props;\n\n    return React.createElement(\n      as || 'div',\n      { ref: this.handleNode, ...props },\n      children,\n    );\n  }\n}\n","import * as React from 'react';\nimport type { InViewHookResponse, IntersectionOptions } from './index';\nimport { observe } from './observe';\n\ntype State = {\n  inView: boolean;\n  entry?: IntersectionObserverEntry;\n};\n\n/**\n * React Hooks make it easy to monitor the `inView` state of your components. Call\n * the `useInView` hook with the (optional) [options](#options) you need. It will\n * return an array containing a `ref`, the `inView` status and the current\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\n * report the status.\n *\n * @example\n * ```jsx\n * import React from 'react';\n * import { useInView } from 'react-intersection-observer';\n *\n * const Component = () => {\n *   const { ref, inView, entry } = useInView({\n *       threshold: 0,\n *   });\n *\n *   return (\n *     <div ref={ref}>\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\n *     </div>\n *   );\n * };\n * ```\n */\nexport function useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange,\n}: IntersectionOptions = {}): InViewHookResponse {\n  const [ref, setRef] = React.useState<Element | null>(null);\n  const callback = React.useRef<IntersectionOptions['onChange']>();\n  const [state, setState] = React.useState<State>({\n    inView: !!initialInView,\n    entry: undefined,\n  });\n\n  // Store the onChange callback in a `ref`, so we can access the latest instance\n  // inside the `useEffect`, but without triggering a rerender.\n  callback.current = onChange;\n\n  React.useEffect(\n    () => {\n      // Ensure we have node ref, and that we shouldn't skip observing\n      if (skip || !ref) return;\n\n      let unobserve: (() => void) | undefined;\n      unobserve = observe(\n        ref,\n        (inView, entry) => {\n          setState({\n            inView,\n            entry,\n          });\n          if (callback.current) callback.current(inView, entry);\n\n          if (entry.isIntersecting && triggerOnce && unobserve) {\n            // If it should only trigger once, unobserve the element after it's inView\n            unobserve();\n            unobserve = undefined;\n          }\n        },\n        {\n          root,\n          rootMargin,\n          threshold,\n          // @ts-ignore\n          trackVisibility,\n          // @ts-ignore\n          delay,\n        },\n        fallbackInView,\n      );\n\n      return () => {\n        if (unobserve) {\n          unobserve();\n        }\n      };\n    },\n    // We break the rule here, because we aren't including the actual `threshold` variable\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      // If the threshold is an array, convert it to a string, so it won't change between renders.\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      Array.isArray(threshold) ? threshold.toString() : threshold,\n      ref,\n      root,\n      rootMargin,\n      triggerOnce,\n      skip,\n      trackVisibility,\n      fallbackInView,\n      delay,\n    ],\n  );\n\n  const entryTarget = state.entry?.target;\n\n  React.useEffect(() => {\n    if (!ref && entryTarget && !triggerOnce && !skip) {\n      // If we don't have a node ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView,\n        entry: undefined,\n      });\n    }\n  }, [ref, entryTarget, triggerOnce, skip, initialInView]);\n\n  const result = [setRef, state.inView, state.entry] as InViewHookResponse;\n\n  // Support object destructuring, by adding the specific values.\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n\n  return result;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}