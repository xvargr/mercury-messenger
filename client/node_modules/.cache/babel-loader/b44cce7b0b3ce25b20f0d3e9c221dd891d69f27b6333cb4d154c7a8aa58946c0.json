{"ast":null,"code":"import _slicedToArray from\"/home/agreus/Documents/webdev/mercury-messenger/client/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";import{useEffect,useState,useMemo,useRef,useContext}from\"react\";import{useParams}from\"react-router-dom\";import{useInView}from\"react-intersection-observer\";// components\nimport ChatInputBox from\"../chat/ChatInputBox\";import ChatBanner from\"../chat/ChatBanner\";import GoToBottomButton from\"../chat/GoToBottomButton\";import Dots from\"../ui/Dots\";// context\nimport{DataContext}from\"../context/DataContext\";import{ChatSkeletonLoader}from\"../ui/SkeletonLoaders\";// utility hooks\nimport useSocket from\"../../utils/socket\";import{ChatStack}from\"../../utils/iterableComponents\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function ChatWindow(){var _useParams=useParams(),channel=_useParams.channel;// context\nvar _useContext=useContext(DataContext),dataReady=_useContext.dataReady,chatMounted=_useContext.chatMounted,stateRestored=_useContext.stateRestored,dataHelpers=_useContext.dataHelpers,selectedGroup=_useContext.selectedGroup,selectedChannel=_useContext.selectedChannel,selectedChatIsDepleted=_useContext.selectedChatIsDepleted;// states\nvar _useState=useState(Date.now()),_useState2=_slicedToArray(_useState,2),lastUpdate=_useState2[0],setLastUpdate=_useState2[1];// refs\nvar topOfPageRef=useRef(null);var bottomOfPageRef=useRef(null);var chatWindowRef=useRef(null);// scrollRefs\nvar scrollElapsedRef=useRef(null);var scrollTimerRef=useRef(null);var scrollPositionRef=useRef(null);// intersection-observer\nvar _useInView=useInView(),_useInView2=_slicedToArray(_useInView,2),bottomVisibleRef=_useInView2[0],bottomOfPageIsVisible=_useInView2[1];// custom hooks\nvar _useSocket=useSocket(),sendMessage=_useSocket.sendMessage,appendMessage=_useSocket.appendMessage,fetchMore=_useSocket.fetchMore;// memos\nvar memoizedSkeleton=useMemo(function(){return/*#__PURE__*/_jsx(ChatSkeletonLoader,{count:15});},[]);// scroll to bottom on every new message if already latched to the bottom,\nfunction goToBottom(params){if(params!==null&&params!==void 0&&params.smooth){bottomOfPageRef.current.scrollIntoView({block:\"end\",inline:\"start\"});}else{var chatWindow=document.querySelector(\"#chatWindow\");chatWindow.scrollTo({top:chatWindow.scrollHeight,behavior:\"instant\"});}}// scroll to bottom on first load\nuseEffect(function(){if(chatWindowRef.current){goToBottom();}},[dataReady,selectedChannel]);// scroll to bottom on new message if latched to the bottom\nuseEffect(function(){if(bottomOfPageRef.current&&bottomOfPageIsVisible){goToBottom({smooth:true});}// eslint-disable-next-line react-hooks/exhaustive-deps\n});// scroll position preservation on fetchMore\nuseEffect(function(){var chatWindow=document.querySelector(\"#chatWindow\");if(scrollPositionRef.current){var newPosition=chatWindow.scrollHeight-scrollPositionRef.current;chatWindow.scrollTo({top:newPosition,behavior:\"instant\"});}// eslint-disable-next-line react-hooks/exhaustive-deps\n},[scrollPositionRef.current]);// rerender every 30 sec to update timestamps\nuseEffect(function(){var rerenderInterval=setInterval(function(){return setLastUpdate(Date.now());},30000);return function(){return clearInterval(rerenderInterval);};},[lastUpdate]);function sendOut(sendObj){if(dataReady){var _dataHelpers$getLastI=dataHelpers.getLastInfo(selectedGroup._id,selectedChannel._id),elapsed=_dataHelpers$getLastI.elapsed,lastCluster=_dataHelpers$getLastI.lastCluster,lastSender=_dataHelpers$getLastI.lastSender;if(sendObj.reply||elapsed>60000||lastSender!==localStorage.username){sendMessage({message:sendObj,target:{group:selectedGroup._id,channel:selectedChannel._id}});}else if(elapsed<60000&&lastSender===localStorage.username){appendMessage({message:sendObj,parent:lastCluster,target:{group:selectedGroup._id,channel:selectedChannel._id}});}goToBottom({smooth:true});}}// fetch more messages on scroll to top, and save scroll position\nfunction handleScroll(){function setPositionOnTimeout(){scrollTimerRef.current=setTimeout(function(){scrollElapsedRef.current=null;if(chatWindowRef.current.scrollTop===0&&!selectedChatIsDepleted){fetchMore({target:{group:selectedGroup._id,channel:selectedChannel._id},last:selectedGroup.chatData[selectedChannel._id][0].clusterTimestamp}).then(function(){scrollPositionRef.current=chatWindowRef.current.scrollHeight;});}},250);}// if timer is not set, set it\nif(!(scrollElapsedRef!==null&&scrollElapsedRef!==void 0&&scrollElapsedRef.current)){scrollElapsedRef.current=Date.now();setPositionOnTimeout();}// throttler, if time passed since last scroll evt <250ms ignore and reset scroll timer\nelse if(Date.now()-scrollElapsedRef.current<250){scrollElapsedRef.current=Date.now();clearTimeout(scrollTimerRef.current);setPositionOnTimeout();}}if(!dataReady||!chatMounted||!stateRestored){return/*#__PURE__*/_jsxs(\"section\",{className:\"w-full h-full flex-grow min-w-0 bg-gray-600 overflow-x-hidden flex flex-col fixed right-0 top-0 md:relative\",children:[/*#__PURE__*/_jsx(ChatBanner,{name:channel,pending:true}),/*#__PURE__*/_jsx(\"div\",{className:\"w-full flex-grow overflow-y-auto overflow-x-hidden scrollbar-dark scroll-smooth\",children:memoizedSkeleton})]});}else{return/*#__PURE__*/_jsxs(\"section\",{className:\"w-full h-full flex-grow min-w-0 bg-gray-600 overflow-x-hidden flex flex-col fixed right-0 top-0 md:relative\",children:[/*#__PURE__*/_jsx(ChatBanner,{name:selectedChannel.name}),/*#__PURE__*/_jsxs(\"div\",{className:\"overflow-y-auto overflow-x-hidden scrollbar-dark scroll-smooth\",id:\"chatWindow\",onScroll:function onScroll(){return handleScroll();},ref:chatWindowRef,children:[selectedChatIsDepleted?/*#__PURE__*/_jsx(\"div\",{className:\"w-full h-20 flex justify-center items-center opacity-40\",children:\"no more messages\"}):/*#__PURE__*/_jsx(\"div\",{className:\"w-full h-20 flex justify-center items-center\",ref:topOfPageRef,children:/*#__PURE__*/_jsx(Dots,{className:\"flex w-10 justify-around items-center p-0.5 fill-gray-500\"})}),/*#__PURE__*/_jsx(ChatStack,{}),/*#__PURE__*/_jsx(GoToBottomButton,{visible:bottomOfPageIsVisible,passOnClick:function passOnClick(){return goToBottom({smooth:true});}}),/*#__PURE__*/_jsx(\"div\",{className:\"w-full h-28\",ref:function ref(el){bottomOfPageRef.current=el;bottomVisibleRef(el);}}),/*#__PURE__*/_jsx(ChatInputBox,{return:sendOut})]})]});}}export default ChatWindow;","map":{"version":3,"names":["useEffect","useState","useMemo","useRef","useContext","useParams","useInView","ChatInputBox","ChatBanner","GoToBottomButton","Dots","DataContext","ChatSkeletonLoader","useSocket","ChatStack","ChatWindow","channel","dataReady","chatMounted","stateRestored","dataHelpers","selectedGroup","selectedChannel","selectedChatIsDepleted","Date","now","lastUpdate","setLastUpdate","topOfPageRef","bottomOfPageRef","chatWindowRef","scrollElapsedRef","scrollTimerRef","scrollPositionRef","bottomVisibleRef","bottomOfPageIsVisible","sendMessage","appendMessage","fetchMore","memoizedSkeleton","goToBottom","params","smooth","current","scrollIntoView","block","inline","chatWindow","document","querySelector","scrollTo","top","scrollHeight","behavior","newPosition","rerenderInterval","setInterval","clearInterval","sendOut","sendObj","getLastInfo","_id","elapsed","lastCluster","lastSender","reply","localStorage","username","message","target","group","parent","handleScroll","setPositionOnTimeout","setTimeout","scrollTop","last","chatData","clusterTimestamp","then","clearTimeout","name","el"],"sources":["/home/agreus/Documents/webdev/mercury-messenger/client/src/components/layout/ChatWindow.js"],"sourcesContent":["import { useEffect, useState, useMemo, useRef, useContext } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { useInView } from \"react-intersection-observer\";\n\n// components\nimport ChatInputBox from \"../chat/ChatInputBox\";\nimport ChatBanner from \"../chat/ChatBanner\";\nimport GoToBottomButton from \"../chat/GoToBottomButton\";\nimport Dots from \"../ui/Dots\";\n\n// context\nimport { DataContext } from \"../context/DataContext\";\nimport { ChatSkeletonLoader } from \"../ui/SkeletonLoaders\";\n\n// utility hooks\nimport useSocket from \"../../utils/socket\";\nimport { ChatStack } from \"../../utils/iterableComponents\";\n\nfunction ChatWindow() {\n  const { channel } = useParams();\n\n  // context\n  const {\n    dataReady,\n    chatMounted,\n    stateRestored,\n    dataHelpers,\n    selectedGroup,\n    selectedChannel,\n    selectedChatIsDepleted,\n  } = useContext(DataContext);\n\n  // states\n  const [lastUpdate, setLastUpdate] = useState(Date.now());\n\n  // refs\n  const topOfPageRef = useRef(null);\n  const bottomOfPageRef = useRef(null);\n  const chatWindowRef = useRef(null);\n\n  // scrollRefs\n  const scrollElapsedRef = useRef(null);\n  const scrollTimerRef = useRef(null);\n  const scrollPositionRef = useRef(null);\n\n  // intersection-observer\n  const [bottomVisibleRef, bottomOfPageIsVisible] = useInView();\n\n  // custom hooks\n  const { sendMessage, appendMessage, fetchMore } = useSocket();\n\n  // memos\n  const memoizedSkeleton = useMemo(() => <ChatSkeletonLoader count={15} />, []);\n\n  // scroll to bottom on every new message if already latched to the bottom,\n  function goToBottom(params) {\n    if (params?.smooth) {\n      bottomOfPageRef.current.scrollIntoView({\n        block: \"end\",\n        inline: \"start\",\n      });\n    } else {\n      const chatWindow = document.querySelector(\"#chatWindow\");\n\n      chatWindow.scrollTo({\n        top: chatWindow.scrollHeight,\n        behavior: \"instant\",\n      });\n    }\n  }\n\n  // scroll to bottom on first load\n  useEffect(() => {\n    if (chatWindowRef.current) {\n      goToBottom();\n    }\n  }, [dataReady, selectedChannel]);\n\n  // scroll to bottom on new message if latched to the bottom\n  useEffect(() => {\n    if (bottomOfPageRef.current && bottomOfPageIsVisible) {\n      goToBottom({ smooth: true });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  });\n\n  // scroll position preservation on fetchMore\n  useEffect(() => {\n    const chatWindow = document.querySelector(\"#chatWindow\");\n    if (scrollPositionRef.current) {\n      const newPosition = chatWindow.scrollHeight - scrollPositionRef.current;\n\n      chatWindow.scrollTo({\n        top: newPosition,\n        behavior: \"instant\",\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [scrollPositionRef.current]);\n\n  // rerender every 30 sec to update timestamps\n  useEffect(() => {\n    const rerenderInterval = setInterval(\n      () => setLastUpdate(Date.now()),\n      30000\n    );\n    return () => clearInterval(rerenderInterval);\n  }, [lastUpdate]);\n\n  function sendOut(sendObj) {\n    if (dataReady) {\n      const { elapsed, lastCluster, lastSender } = dataHelpers.getLastInfo(\n        selectedGroup._id,\n        selectedChannel._id\n      );\n      if (\n        sendObj.reply ||\n        elapsed > 60000 ||\n        lastSender !== localStorage.username\n      ) {\n        sendMessage({\n          message: sendObj,\n          target: { group: selectedGroup._id, channel: selectedChannel._id },\n        });\n      } else if (elapsed < 60000 && lastSender === localStorage.username) {\n        appendMessage({\n          message: sendObj,\n          parent: lastCluster,\n          target: { group: selectedGroup._id, channel: selectedChannel._id },\n        });\n      }\n      goToBottom({ smooth: true });\n    }\n  }\n\n  // fetch more messages on scroll to top, and save scroll position\n  function handleScroll() {\n    function setPositionOnTimeout() {\n      scrollTimerRef.current = setTimeout(() => {\n        scrollElapsedRef.current = null;\n\n        if (chatWindowRef.current.scrollTop === 0 && !selectedChatIsDepleted) {\n          fetchMore({\n            target: {\n              group: selectedGroup._id,\n              channel: selectedChannel._id,\n            },\n            last: selectedGroup.chatData[selectedChannel._id][0]\n              .clusterTimestamp,\n          }).then(() => {\n            scrollPositionRef.current = chatWindowRef.current.scrollHeight;\n          });\n        }\n      }, 250);\n    }\n\n    // if timer is not set, set it\n    if (!scrollElapsedRef?.current) {\n      scrollElapsedRef.current = Date.now();\n      setPositionOnTimeout();\n    }\n\n    // throttler, if time passed since last scroll evt <250ms ignore and reset scroll timer\n    else if (Date.now() - scrollElapsedRef.current < 250) {\n      scrollElapsedRef.current = Date.now();\n      clearTimeout(scrollTimerRef.current);\n      setPositionOnTimeout();\n    }\n  }\n\n  if (!dataReady || !chatMounted || !stateRestored) {\n    return (\n      <section className=\"w-full h-full flex-grow min-w-0 bg-gray-600 overflow-x-hidden flex flex-col fixed right-0 top-0 md:relative\">\n        <ChatBanner name={channel} pending />\n\n        <div className=\"w-full flex-grow overflow-y-auto overflow-x-hidden scrollbar-dark scroll-smooth\">\n          {memoizedSkeleton}\n        </div>\n      </section>\n    );\n  } else {\n    return (\n      <section className=\"w-full h-full flex-grow min-w-0 bg-gray-600 overflow-x-hidden flex flex-col fixed right-0 top-0 md:relative\">\n        {/* // firefox does not respect flex shrink without width min 0 ! */}\n\n        <ChatBanner name={selectedChannel.name} />\n\n        <div\n          className=\"overflow-y-auto overflow-x-hidden scrollbar-dark scroll-smooth\"\n          id=\"chatWindow\"\n          onScroll={() => handleScroll()}\n          ref={chatWindowRef}\n        >\n          {selectedChatIsDepleted ? (\n            <div className=\"w-full h-20 flex justify-center items-center opacity-40\">\n              no more messages\n            </div>\n          ) : (\n            <div\n              className=\"w-full h-20 flex justify-center items-center\"\n              ref={topOfPageRef}\n            >\n              <Dots className=\"flex w-10 justify-around items-center p-0.5 fill-gray-500\" />\n            </div>\n          )}\n\n          <ChatStack />\n\n          <GoToBottomButton\n            visible={bottomOfPageIsVisible}\n            passOnClick={() => goToBottom({ smooth: true })}\n          />\n\n          <div\n            className=\"w-full h-28\"\n            ref={(el) => {\n              bottomOfPageRef.current = el;\n              bottomVisibleRef(el);\n            }}\n          ></div>\n\n          <ChatInputBox return={sendOut} />\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default ChatWindow;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}