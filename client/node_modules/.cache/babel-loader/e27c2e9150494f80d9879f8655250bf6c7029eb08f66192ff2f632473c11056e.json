{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useContext } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { DataContext } from \"../components/context/DataContext\";\nimport useLocalFallback from \"./localFallback\";\n\n// this hook reads the cached group and channel id from local storage and uses it to \"remember\" the\n// \"browser's\" position and retrieve the relevant data necessary to show the loaded page\n// used primarily on refresh\nexport default function useStateRestore() {\n  _s();\n  const {\n    groupData,\n    dataMounted,\n    chatMounted,\n    stateRestored,\n    setStateRestored,\n    setSelectedGroup,\n    setSelectedChannel\n  } = useContext(DataContext);\n  const {\n    group: groupParam,\n    channel: channelParam\n  } = useParams();\n  const navigate = useNavigate();\n  const {\n    retrieveStored\n  } = useLocalFallback();\n  useEffect(() => {\n    if (dataMounted && chatMounted && !stateRestored) {\n      // console.log(\"restoringState\");\n      const cachedGroupId = retrieveStored.groupId();\n      const cachedChannelId = retrieveStored.channelId();\n      const cachedGroupName = retrieveStored.groupName();\n      const cachedChannelName = retrieveStored.channelName();\n\n      // reroute to home is discrepancy exists between current location and backed up location\n      // else, restore selected context\n      // console.log(cachedChannelId);\n      // console.log(cachedGroupId);\n      if (groupParam && cachedGroupId) {\n        if (groupParam !== cachedGroupName) navigate(\"/\");\n        const restoredGroup = groupData[cachedGroupId];\n        if (!restoredGroup) navigate(\"/\");\n        setSelectedGroup(restoredGroup);\n      }\n      if (channelParam && cachedChannelId) {\n        if (channelParam !== cachedChannelName) navigate(\"/\");\n        const restoredChannel = groupData[cachedGroupId].channels.text.find(channel => channel._id === cachedChannelId);\n        if (!restoredChannel) navigate(\"/\");\n        setSelectedChannel(restoredChannel);\n      }\n      setStateRestored(true);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dataMounted, chatMounted]);\n}\n_s(useStateRestore, \"3lSxoY9lyJsY2QEoeW5OIACVjb8=\", false, function () {\n  return [useParams, useNavigate, useLocalFallback];\n});","map":{"version":3,"names":["useEffect","useContext","useParams","useNavigate","DataContext","useLocalFallback","useStateRestore","groupData","dataMounted","chatMounted","stateRestored","setStateRestored","setSelectedGroup","setSelectedChannel","group","groupParam","channel","channelParam","navigate","retrieveStored","cachedGroupId","groupId","cachedChannelId","channelId","cachedGroupName","groupName","cachedChannelName","channelName","restoredGroup","restoredChannel","channels","text","find","_id"],"sources":["/home/agreus/Documents/webdev/mercury-messenger/client/src/utils/restoreState.js"],"sourcesContent":["import { useEffect, useContext } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\n\nimport { DataContext } from \"../components/context/DataContext\";\n\nimport useLocalFallback from \"./localFallback\";\n\n// this hook reads the cached group and channel id from local storage and uses it to \"remember\" the\n// \"browser's\" position and retrieve the relevant data necessary to show the loaded page\n// used primarily on refresh\nexport default function useStateRestore() {\n  const {\n    groupData,\n    dataMounted,\n    chatMounted,\n    stateRestored,\n    setStateRestored,\n    setSelectedGroup,\n    setSelectedChannel,\n  } = useContext(DataContext);\n  const { group: groupParam, channel: channelParam } = useParams();\n  const navigate = useNavigate();\n\n  const { retrieveStored } = useLocalFallback();\n\n  useEffect(() => {\n    if (dataMounted && chatMounted && !stateRestored) {\n      // console.log(\"restoringState\");\n      const cachedGroupId = retrieveStored.groupId();\n      const cachedChannelId = retrieveStored.channelId();\n\n      const cachedGroupName = retrieveStored.groupName();\n      const cachedChannelName = retrieveStored.channelName();\n\n      // reroute to home is discrepancy exists between current location and backed up location\n      // else, restore selected context\n      // console.log(cachedChannelId);\n      // console.log(cachedGroupId);\n      if (groupParam && cachedGroupId) {\n        if (groupParam !== cachedGroupName) navigate(\"/\");\n        const restoredGroup = groupData[cachedGroupId];\n        if (!restoredGroup) navigate(\"/\");\n        setSelectedGroup(restoredGroup);\n      }\n\n      if (channelParam && cachedChannelId) {\n        if (channelParam !== cachedChannelName) navigate(\"/\");\n        const restoredChannel = groupData[cachedGroupId].channels.text.find(\n          (channel) => channel._id === cachedChannelId\n        );\n        if (!restoredChannel) navigate(\"/\");\n        setSelectedChannel(restoredChannel);\n      }\n\n      setStateRestored(true);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [dataMounted, chatMounted]);\n}\n"],"mappings":";AAAA,SAASA,SAAS,EAAEC,UAAU,QAAQ,OAAO;AAC7C,SAASC,SAAS,EAAEC,WAAW,QAAQ,kBAAkB;AAEzD,SAASC,WAAW,QAAQ,mCAAmC;AAE/D,OAAOC,gBAAgB,MAAM,iBAAiB;;AAE9C;AACA;AACA;AACA,eAAe,SAASC,eAAe,GAAG;EAAA;EACxC,MAAM;IACJC,SAAS;IACTC,WAAW;IACXC,WAAW;IACXC,aAAa;IACbC,gBAAgB;IAChBC,gBAAgB;IAChBC;EACF,CAAC,GAAGZ,UAAU,CAACG,WAAW,CAAC;EAC3B,MAAM;IAAEU,KAAK,EAAEC,UAAU;IAAEC,OAAO,EAAEC;EAAa,CAAC,GAAGf,SAAS,EAAE;EAChE,MAAMgB,QAAQ,GAAGf,WAAW,EAAE;EAE9B,MAAM;IAAEgB;EAAe,CAAC,GAAGd,gBAAgB,EAAE;EAE7CL,SAAS,CAAC,MAAM;IACd,IAAIQ,WAAW,IAAIC,WAAW,IAAI,CAACC,aAAa,EAAE;MAChD;MACA,MAAMU,aAAa,GAAGD,cAAc,CAACE,OAAO,EAAE;MAC9C,MAAMC,eAAe,GAAGH,cAAc,CAACI,SAAS,EAAE;MAElD,MAAMC,eAAe,GAAGL,cAAc,CAACM,SAAS,EAAE;MAClD,MAAMC,iBAAiB,GAAGP,cAAc,CAACQ,WAAW,EAAE;;MAEtD;MACA;MACA;MACA;MACA,IAAIZ,UAAU,IAAIK,aAAa,EAAE;QAC/B,IAAIL,UAAU,KAAKS,eAAe,EAAEN,QAAQ,CAAC,GAAG,CAAC;QACjD,MAAMU,aAAa,GAAGrB,SAAS,CAACa,aAAa,CAAC;QAC9C,IAAI,CAACQ,aAAa,EAAEV,QAAQ,CAAC,GAAG,CAAC;QACjCN,gBAAgB,CAACgB,aAAa,CAAC;MACjC;MAEA,IAAIX,YAAY,IAAIK,eAAe,EAAE;QACnC,IAAIL,YAAY,KAAKS,iBAAiB,EAAER,QAAQ,CAAC,GAAG,CAAC;QACrD,MAAMW,eAAe,GAAGtB,SAAS,CAACa,aAAa,CAAC,CAACU,QAAQ,CAACC,IAAI,CAACC,IAAI,CAChEhB,OAAO,IAAKA,OAAO,CAACiB,GAAG,KAAKX,eAAe,CAC7C;QACD,IAAI,CAACO,eAAe,EAAEX,QAAQ,CAAC,GAAG,CAAC;QACnCL,kBAAkB,CAACgB,eAAe,CAAC;MACrC;MAEAlB,gBAAgB,CAAC,IAAI,CAAC;IACxB;IACA;EACF,CAAC,EAAE,CAACH,WAAW,EAAEC,WAAW,CAAC,CAAC;AAChC;AAAC,GAhDuBH,eAAe;EAAA,QAUgBJ,SAAS,EAC7CC,WAAW,EAEDE,gBAAgB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}