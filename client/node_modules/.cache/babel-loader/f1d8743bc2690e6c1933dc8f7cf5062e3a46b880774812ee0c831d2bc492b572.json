{"ast":null,"code":"import _regeneratorRuntime from \"/home/agreus/Documents/webdev/mercury-messenger/client/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\nfunction _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n      args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n      _next(undefined);\n    });\n  };\n}\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) {\n      symbols = symbols.filter(function (sym) {\n        return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n      });\n    }\n    keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport isRetryAllowed from 'is-retry-allowed';\nvar namespace = 'axios-retry';\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\n\nexport function isNetworkError(error) {\n  return !error.response && Boolean(error.code) &&\n  // Prevents retrying cancelled requests\n  error.code !== 'ECONNABORTED' &&\n  // Prevents retrying timed out requests\n  isRetryAllowed(error); // Prevents retrying unsafe errors\n}\n\nvar SAFE_HTTP_METHODS = ['get', 'head', 'options'];\nvar IDEMPOTENT_HTTP_METHODS = SAFE_HTTP_METHODS.concat(['put', 'delete']);\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\n\nexport function isRetryableError(error) {\n  return error.code !== 'ECONNABORTED' && (!error.response || error.response.status >= 500 && error.response.status <= 599);\n}\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\n\nexport function isSafeRequestError(error) {\n  if (!error.config) {\n    // Cannot determine if the request can be retried\n    return false;\n  }\n  return isRetryableError(error) && SAFE_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\n\nexport function isIdempotentRequestError(error) {\n  if (!error.config) {\n    // Cannot determine if the request can be retried\n    return false;\n  }\n  return isRetryableError(error) && IDEMPOTENT_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\n\nexport function isNetworkOrIdempotentRequestError(error) {\n  return isNetworkError(error) || isIdempotentRequestError(error);\n}\n/**\n * @return {number} - delay in milliseconds, always 0\n */\n\nfunction noDelay() {\n  return 0;\n}\n/**\n * @param  {number} [retryNumber=0]\n * @return {number} - delay in milliseconds\n */\n\nexport function exponentialDelay() {\n  var retryNumber = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n  var delay = Math.pow(2, retryNumber) * 100;\n  var randomSum = delay * 0.2 * Math.random(); // 0-20% of the delay\n\n  return delay + randomSum;\n}\n/**\n * Initializes and returns the retry state for the given request/config\n * @param  {AxiosRequestConfig} config\n * @return {Object}\n */\n\nfunction getCurrentState(config) {\n  var currentState = config[namespace] || {};\n  currentState.retryCount = currentState.retryCount || 0;\n  config[namespace] = currentState;\n  return currentState;\n}\n/**\n * Returns the axios-retry options for the current request\n * @param  {AxiosRequestConfig} config\n * @param  {AxiosRetryConfig} defaultOptions\n * @return {AxiosRetryConfig}\n */\n\nfunction getRequestOptions(config, defaultOptions) {\n  return _objectSpread(_objectSpread({}, defaultOptions), config[namespace]);\n}\n/**\n * @param  {Axios} axios\n * @param  {AxiosRequestConfig} config\n */\n\nfunction fixConfig(axios, config) {\n  if (axios.defaults.agent === config.agent) {\n    delete config.agent;\n  }\n  if (axios.defaults.httpAgent === config.httpAgent) {\n    delete config.httpAgent;\n  }\n  if (axios.defaults.httpsAgent === config.httpsAgent) {\n    delete config.httpsAgent;\n  }\n}\n/**\n * Checks retryCondition if request can be retried. Handles it's retruning value or Promise.\n * @param  {number} retries\n * @param  {Function} retryCondition\n * @param  {Object} currentState\n * @param  {Error} error\n * @return {boolean}\n */\n\nfunction shouldRetry(_x, _x2, _x3, _x4) {\n  return _shouldRetry.apply(this, arguments);\n}\n/**\n * Adds response interceptors to an axios instance to retry requests failed due to network issues\n *\n * @example\n *\n * import axios from 'axios';\n *\n * axiosRetry(axios, { retries: 3 });\n *\n * axios.get('http://example.com/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * // Exponential back-off retry delay between requests\n * axiosRetry(axios, { retryDelay : axiosRetry.exponentialDelay});\n *\n * // Custom retry delay\n * axiosRetry(axios, { retryDelay : (retryCount) => {\n *   return retryCount * 1000;\n * }});\n *\n * // Also works with custom axios instances\n * const client = axios.create({ baseURL: 'http://example.com' });\n * axiosRetry(client, { retries: 3 });\n *\n * client.get('/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * // Allows request-specific configuration\n * client\n *   .get('/test', {\n *     'axios-retry': {\n *       retries: 0\n *     }\n *   })\n *   .catch(error => { // The first request fails\n *     error !== undefined\n *   });\n *\n * @param {Axios} axios An axios instance (the axios object or one created from axios.create)\n * @param {Object} [defaultOptions]\n * @param {number} [defaultOptions.retries=3] Number of retries\n * @param {boolean} [defaultOptions.shouldResetTimeout=false]\n *        Defines if the timeout should be reset between retries\n * @param {Function} [defaultOptions.retryCondition=isNetworkOrIdempotentRequestError]\n *        A function to determine if the error can be retried\n * @param {Function} [defaultOptions.retryDelay=noDelay]\n *        A function to determine the delay between retry requests\n * @param {Function} [defaultOptions.onRetry=()=>{}]\n *        A function to get notified when a retry occurs\n */\n\nfunction _shouldRetry() {\n  _shouldRetry = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(retries, retryCondition, currentState, error) {\n    var shouldRetryOrPromise, shouldRetryPromiseResult;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            shouldRetryOrPromise = currentState.retryCount < retries && retryCondition(error); // This could be a promise\n            if (!(typeof shouldRetryOrPromise === 'object')) {\n              _context.next = 12;\n              break;\n            }\n            _context.prev = 2;\n            _context.next = 5;\n            return shouldRetryOrPromise;\n          case 5:\n            shouldRetryPromiseResult = _context.sent;\n            return _context.abrupt(\"return\", shouldRetryPromiseResult !== false);\n          case 9:\n            _context.prev = 9;\n            _context.t0 = _context[\"catch\"](2);\n            return _context.abrupt(\"return\", false);\n          case 12:\n            return _context.abrupt(\"return\", shouldRetryOrPromise);\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 9]]);\n  }));\n  return _shouldRetry.apply(this, arguments);\n}\nexport default function axiosRetry(axios, defaultOptions) {\n  axios.interceptors.request.use(function (config) {\n    var currentState = getCurrentState(config);\n    currentState.lastRequestTime = Date.now();\n    return config;\n  });\n  axios.interceptors.response.use(null, /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(error) {\n      var config, _getRequestOptions, _getRequestOptions$re, retries, _getRequestOptions$re2, retryCondition, _getRequestOptions$re3, retryDelay, _getRequestOptions$sh, shouldResetTimeout, _getRequestOptions$on, onRetry, currentState, delay, lastRequestDuration;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              config = error.config; // If we have no information to retry the request\n              if (config) {\n                _context2.next = 3;\n                break;\n              }\n              return _context2.abrupt(\"return\", Promise.reject(error));\n            case 3:\n              _getRequestOptions = getRequestOptions(config, defaultOptions), _getRequestOptions$re = _getRequestOptions.retries, retries = _getRequestOptions$re === void 0 ? 3 : _getRequestOptions$re, _getRequestOptions$re2 = _getRequestOptions.retryCondition, retryCondition = _getRequestOptions$re2 === void 0 ? isNetworkOrIdempotentRequestError : _getRequestOptions$re2, _getRequestOptions$re3 = _getRequestOptions.retryDelay, retryDelay = _getRequestOptions$re3 === void 0 ? noDelay : _getRequestOptions$re3, _getRequestOptions$sh = _getRequestOptions.shouldResetTimeout, shouldResetTimeout = _getRequestOptions$sh === void 0 ? false : _getRequestOptions$sh, _getRequestOptions$on = _getRequestOptions.onRetry, onRetry = _getRequestOptions$on === void 0 ? function () {} : _getRequestOptions$on;\n              currentState = getCurrentState(config);\n              _context2.next = 7;\n              return shouldRetry(retries, retryCondition, currentState, error);\n            case 7:\n              if (!_context2.sent) {\n                _context2.next = 15;\n                break;\n              }\n              currentState.retryCount += 1;\n              delay = retryDelay(currentState.retryCount, error); // Axios fails merging this configuration to the default configuration because it has an issue\n              // with circular structures: https://github.com/mzabriskie/axios/issues/370\n              fixConfig(axios, config);\n              if (!shouldResetTimeout && config.timeout && currentState.lastRequestTime) {\n                lastRequestDuration = Date.now() - currentState.lastRequestTime; // Minimum 1ms timeout (passing 0 or less to XHR means no timeout)\n                config.timeout = Math.max(config.timeout - lastRequestDuration - delay, 1);\n              }\n              config.transformRequest = [function (data) {\n                return data;\n              }];\n              onRetry(currentState.retryCount, error, config);\n              return _context2.abrupt(\"return\", new Promise(function (resolve) {\n                return setTimeout(function () {\n                  return resolve(axios(config));\n                }, delay);\n              }));\n            case 15:\n              return _context2.abrupt(\"return\", Promise.reject(error));\n            case 16:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n    return function (_x5) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n} // Compatibility with CommonJS\n\naxiosRetry.isNetworkError = isNetworkError;\naxiosRetry.isSafeRequestError = isSafeRequestError;\naxiosRetry.isIdempotentRequestError = isIdempotentRequestError;\naxiosRetry.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;\naxiosRetry.exponentialDelay = exponentialDelay;\naxiosRetry.isRetryableError = isRetryableError;","map":{"version":3,"mappings":"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","names":["isRetryAllowed","namespace","isNetworkError","error","response","Boolean","code","SAFE_HTTP_METHODS","IDEMPOTENT_HTTP_METHODS","concat","isRetryableError","status","isSafeRequestError","config","indexOf","method","isIdempotentRequestError","isNetworkOrIdempotentRequestError","noDelay","exponentialDelay","retryNumber","delay","Math","pow","randomSum","random","getCurrentState","currentState","retryCount","getRequestOptions","defaultOptions","fixConfig","axios","defaults","agent","httpAgent","httpsAgent","shouldRetry","retries","retryCondition","shouldRetryOrPromise","shouldRetryPromiseResult","axiosRetry","interceptors","request","use","lastRequestTime","Date","now","Promise","reject","retryDelay","shouldResetTimeout","onRetry","timeout","lastRequestDuration","max","transformRequest","data","resolve","setTimeout"],"sources":["/home/agreus/Documents/webdev/mercury-messenger/client/node_modules/axios-retry/es/index.mjs"],"sourcesContent":["import isRetryAllowed from 'is-retry-allowed';\n\nconst namespace = 'axios-retry';\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isNetworkError(error) {\n  return (\n    !error.response &&\n    Boolean(error.code) && // Prevents retrying cancelled requests\n    error.code !== 'ECONNABORTED' && // Prevents retrying timed out requests\n    isRetryAllowed(error)\n  ); // Prevents retrying unsafe errors\n}\n\nconst SAFE_HTTP_METHODS = ['get', 'head', 'options'];\nconst IDEMPOTENT_HTTP_METHODS = SAFE_HTTP_METHODS.concat(['put', 'delete']);\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isRetryableError(error) {\n  return (\n    error.code !== 'ECONNABORTED' &&\n    (!error.response || (error.response.status >= 500 && error.response.status <= 599))\n  );\n}\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isSafeRequestError(error) {\n  if (!error.config) {\n    // Cannot determine if the request can be retried\n    return false;\n  }\n\n  return isRetryableError(error) && SAFE_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isIdempotentRequestError(error) {\n  if (!error.config) {\n    // Cannot determine if the request can be retried\n    return false;\n  }\n\n  return isRetryableError(error) && IDEMPOTENT_HTTP_METHODS.indexOf(error.config.method) !== -1;\n}\n\n/**\n * @param  {Error}  error\n * @return {boolean}\n */\nexport function isNetworkOrIdempotentRequestError(error) {\n  return isNetworkError(error) || isIdempotentRequestError(error);\n}\n\n/**\n * @return {number} - delay in milliseconds, always 0\n */\nfunction noDelay() {\n  return 0;\n}\n\n/**\n * @param  {number} [retryNumber=0]\n * @return {number} - delay in milliseconds\n */\nexport function exponentialDelay(retryNumber = 0) {\n  const delay = Math.pow(2, retryNumber) * 100;\n  const randomSum = delay * 0.2 * Math.random(); // 0-20% of the delay\n  return delay + randomSum;\n}\n\n/**\n * Initializes and returns the retry state for the given request/config\n * @param  {AxiosRequestConfig} config\n * @return {Object}\n */\nfunction getCurrentState(config) {\n  const currentState = config[namespace] || {};\n  currentState.retryCount = currentState.retryCount || 0;\n  config[namespace] = currentState;\n  return currentState;\n}\n\n/**\n * Returns the axios-retry options for the current request\n * @param  {AxiosRequestConfig} config\n * @param  {AxiosRetryConfig} defaultOptions\n * @return {AxiosRetryConfig}\n */\nfunction getRequestOptions(config, defaultOptions) {\n  return { ...defaultOptions, ...config[namespace] };\n}\n\n/**\n * @param  {Axios} axios\n * @param  {AxiosRequestConfig} config\n */\nfunction fixConfig(axios, config) {\n  if (axios.defaults.agent === config.agent) {\n    delete config.agent;\n  }\n  if (axios.defaults.httpAgent === config.httpAgent) {\n    delete config.httpAgent;\n  }\n  if (axios.defaults.httpsAgent === config.httpsAgent) {\n    delete config.httpsAgent;\n  }\n}\n\n/**\n * Checks retryCondition if request can be retried. Handles it's retruning value or Promise.\n * @param  {number} retries\n * @param  {Function} retryCondition\n * @param  {Object} currentState\n * @param  {Error} error\n * @return {boolean}\n */\nasync function shouldRetry(retries, retryCondition, currentState, error) {\n  const shouldRetryOrPromise = currentState.retryCount < retries && retryCondition(error);\n\n  // This could be a promise\n  if (typeof shouldRetryOrPromise === 'object') {\n    try {\n      const shouldRetryPromiseResult = await shouldRetryOrPromise;\n      // keep return true unless shouldRetryPromiseResult return false for compatibility\n      return shouldRetryPromiseResult !== false;\n    } catch (_err) {\n      return false;\n    }\n  }\n  return shouldRetryOrPromise;\n}\n\n/**\n * Adds response interceptors to an axios instance to retry requests failed due to network issues\n *\n * @example\n *\n * import axios from 'axios';\n *\n * axiosRetry(axios, { retries: 3 });\n *\n * axios.get('http://example.com/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * // Exponential back-off retry delay between requests\n * axiosRetry(axios, { retryDelay : axiosRetry.exponentialDelay});\n *\n * // Custom retry delay\n * axiosRetry(axios, { retryDelay : (retryCount) => {\n *   return retryCount * 1000;\n * }});\n *\n * // Also works with custom axios instances\n * const client = axios.create({ baseURL: 'http://example.com' });\n * axiosRetry(client, { retries: 3 });\n *\n * client.get('/test') // The first request fails and the second returns 'ok'\n *   .then(result => {\n *     result.data; // 'ok'\n *   });\n *\n * // Allows request-specific configuration\n * client\n *   .get('/test', {\n *     'axios-retry': {\n *       retries: 0\n *     }\n *   })\n *   .catch(error => { // The first request fails\n *     error !== undefined\n *   });\n *\n * @param {Axios} axios An axios instance (the axios object or one created from axios.create)\n * @param {Object} [defaultOptions]\n * @param {number} [defaultOptions.retries=3] Number of retries\n * @param {boolean} [defaultOptions.shouldResetTimeout=false]\n *        Defines if the timeout should be reset between retries\n * @param {Function} [defaultOptions.retryCondition=isNetworkOrIdempotentRequestError]\n *        A function to determine if the error can be retried\n * @param {Function} [defaultOptions.retryDelay=noDelay]\n *        A function to determine the delay between retry requests\n * @param {Function} [defaultOptions.onRetry=()=>{}]\n *        A function to get notified when a retry occurs\n */\nexport default function axiosRetry(axios, defaultOptions) {\n  axios.interceptors.request.use((config) => {\n    const currentState = getCurrentState(config);\n    currentState.lastRequestTime = Date.now();\n    return config;\n  });\n\n  axios.interceptors.response.use(null, async (error) => {\n    const { config } = error;\n\n    // If we have no information to retry the request\n    if (!config) {\n      return Promise.reject(error);\n    }\n\n    const {\n      retries = 3,\n      retryCondition = isNetworkOrIdempotentRequestError,\n      retryDelay = noDelay,\n      shouldResetTimeout = false,\n      onRetry = () => {}\n    } = getRequestOptions(config, defaultOptions);\n\n    const currentState = getCurrentState(config);\n\n    if (await shouldRetry(retries, retryCondition, currentState, error)) {\n      currentState.retryCount += 1;\n      const delay = retryDelay(currentState.retryCount, error);\n\n      // Axios fails merging this configuration to the default configuration because it has an issue\n      // with circular structures: https://github.com/mzabriskie/axios/issues/370\n      fixConfig(axios, config);\n\n      if (!shouldResetTimeout && config.timeout && currentState.lastRequestTime) {\n        const lastRequestDuration = Date.now() - currentState.lastRequestTime;\n        // Minimum 1ms timeout (passing 0 or less to XHR means no timeout)\n        config.timeout = Math.max(config.timeout - lastRequestDuration - delay, 1);\n      }\n\n      config.transformRequest = [(data) => data];\n\n      onRetry(currentState.retryCount, error, config);\n\n      return new Promise((resolve) => setTimeout(() => resolve(axios(config)), delay));\n    }\n\n    return Promise.reject(error);\n  });\n}\n\n// Compatibility with CommonJS\naxiosRetry.isNetworkError = isNetworkError;\naxiosRetry.isSafeRequestError = isSafeRequestError;\naxiosRetry.isIdempotentRequestError = isIdempotentRequestError;\naxiosRetry.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;\naxiosRetry.exponentialDelay = exponentialDelay;\naxiosRetry.isRetryableError = isRetryableError;\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}